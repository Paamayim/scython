#!/usr/local/bin/scython

pragma:
    options:
        "drop"
        "install"
        "help"

if "help" in options:
    print "help message here"
    exit()


import datetime
import sqlite3, matplotlib, math
matplotlib.use('Agg')
import matplotlib.pyplot as plt

conn = sqlite3.connect("%s.pcfb2.db" % HOME)
c = conn.cursor()

# -----------------------------------------------

if "install" in options:
    if "drop" in options:
        c.execute("DROP TABLE stretch")
        c.execute("DROP TABLE hello")
    
    c.execute("""
    CREATE TABLE stretch (
        sid INTEGER PRIMARY KEY AUTOINCREMENT,
        hello INTEGER NOT NULL,
        
        start INTEGER NOT NULL,
        startPerc REAL NOT NULL,
        
        stop INTEGER,
        stopPerc REAL,
        
        FOREIGN KEY(hello) REFERENCES hello(hid)
    )
    """)
    
    c.execute("""
    CREATE TABLE hello (
        hid INTEGER PRIMARY KEY AUTOINCREMENT,
        checkin INTEGER NOT NULL
    )
    """)
    
    conn.commit()
    
    print "done"
    exit()
    
# -----------------------------------------------

def now():
    return int(`date +%s`)

def getHelloFromId(id):
    c.execute("SELECT * FROM hello WHERE hid = ?", [id])
    return c.fetchone()

def getLastHello():
    c.execute("SELECT * FROM hello ORDER BY checkin DESC LIMIT 1")
    return c.fetchone()
    
def getHelloWorked(hello):
    timeWorked = 0
    
    rows = c.execute("SELECT start, stop FROM stretch WHERE hello = ? AND stop IS NOT NULL", [hello[0]])
    for row in rows:
        timeWorked += row[1] - row[0]
        
    return timeWorked
    
def isHelloValid(hello, hours = 18):
    return hello != None and now() - hello[1] < 3600 * hours
    
def getActiveStart():
    c.execute("SELECT start, hello FROM stretch WHERE stop IS NULL")
    row = c.fetchone()
    if row == None:
        return False
        
    return row
    
def getPercentile(hello, offset = 0):
    worked = getHelloWorked(hello) + offset
    duration = float(now() - hello[1] + 1)
    return worked / duration

# -----------------------------------------------

def getShowData(hello, shownow = False):
    x = []
    y = []
    
    dayStart = int(datetime.date.fromtimestamp(hello[1]).strftime("%s"))
    secsPerHour = 3600.0
    
    c.execute("SELECT start, startPerc, stop, stopPerc FROM stretch WHERE hello = ?", [hello[0]])
    for row in c.fetchall():
        x.append((row[0] - dayStart) / secsPerHour)
        y.append(row[1] * 100)
        
        if row[2] != None:
            x.append((row[2] - dayStart) / secsPerHour)
            y.append(row[3] * 100)
        
    if shownow:
        start = getActiveStart()
        offset = 0 if not start else (now() - start[0])
        
        x.append((now() - dayStart) / secsPerHour)
        y.append(getPercentile(hello, offset) * 100)
        
    return (x, y)
    
def getOtherDaysShowData(hello):
    results = []
    
    c.execute("SELECT * FROM hello WHERE hid != ? ORDER BY hid ASC", [hello[0]])
    for row in c.fetchall():
        (x, y) = getShowData(row)
        
        if len(x) > 1:
            results.append((x, y));
        
    return results
    
def normalizeDay(time, first):
    return map(lambda x: x - first, time)
    
# -----------------------------------------------

def hello(forceData = False):
    lastHello = getLastHello()
    if isHelloValid(lastHello):
        c.execute("SELECT * FROM stretch WHERE hello = ?", [lastHello[0]])
        if c.fetchone() != None:
            exit("error: too soon")
                
    time = now()
    c.execute("INSERT INTO hello VALUES (NULL, ?)", [time])
    conn.commit()
    
    print "hello: %d" % time
    
    if forceData:
        start()
        stop()
        
    return getLastHello()
    
    
def start():
    if getActiveStart():
        exit("error: already started")
    
    lastHello = getLastHello()

    # only force hello if it has been longer than 24 hours since the last one
    if not isHelloValid(lastHello, 24):
        lastHello = hello()
    
    perc = getPercentile(lastHello)
    
    c.execute("INSERT INTO stretch VALUES (NULL, ?, ?, ?, NULL, NULL)", (lastHello[0], now(), perc))
    conn.commit()
    
    print "started"

    
def stop():
    start = getActiveStart()
    if not start:
        exit("error: not started")
        
    hello = getHelloFromId(start[1])
    
    time = now()
    duration = time - start[0]
    perc = getPercentile(hello, duration)
        
    c.execute("UPDATE stretch SET stop = ?, stopPerc = ? WHERE stop IS NULL", (time, perc))
    conn.commit()
    
    print "stopped: %d (%f)" % (duration, perc)


def percentile():
    lastHello = getLastHello()
    (x, y) = getShowData(lastHello, shownow = True)
    print(int(round(y[-1], 2)))


def show(showType = "day"):
    lastHello = getLastHello()
    (x, y) = getShowData(lastHello, shownow = True)
    firstX = x[0] if showType == "hello" else 0
    
    x = normalizeDay(x, firstX)
    plt.figure(figsize=(4.5, 2))
    plt.plot(x, y, color='r', linewidth=2.0)
    plt.hold(True)
    
    days = getOtherDaysShowData(lastHello)
    delta = max(255 / len(days), 1)
    green = delta
    for day in days:
        (x, y) = day
        x = normalizeDay(x, firstX)
        
        color = "#%s" % hex(green << 8)[2:].rjust(6, '0')
        plt.plot(x, y, 'o', markersize = 3, color = color, mec = color)
        green += delta
    
    plt.gca().xaxis.set_major_locator( plt.MaxNLocator(nbins = 12) )
    plt.gca().yaxis.set_major_locator( plt.MaxNLocator(nbins = 5, prune = 'lower') )
    plt.gca().grid(True)
    plt.xlim([0, 24])
    plt.ylim([0, 100])
    plt.savefig("/tmp/pcfb.png", transparent=True)

# -----------------------------------------------

if argv[0] == "start":
    start()
elif argv[0] == "stop":
    stop()
elif argv[0] == "hello":
    hello(True)
elif argv[0] == "wake":
    hello(False)
elif argv[0] == "show":
    show("day")
elif argv[0] == "percentile":
    percentile()
else: 
    exit("unknown command '%s'" % args)
